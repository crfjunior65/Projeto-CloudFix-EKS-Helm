---
name: CI/CD Pipeline - ECR & EKS

on:
  workflow_dispatch: {}

  #  push:
  #  branches:
  #    - main
  #    - devops  # Adicionada branch devops para testes
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: /backoffice/cloudfix-bko-api-back-teste
  EKS_CLUSTER_NAME: cloudfix-cluster

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=v${{ github.run_number }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:pr-${{ github.run_number }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:sha-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-eks:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devops'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install and configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Create namespace if not exists
        run: |
          kubectl create namespace backoffice --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply ConfigMap and Secret
        run: |
          # Ensure any previous test resources are removed before applying
          # This deletes common resource types that the test manifests create.
          # Delete any previous test resources by manifest file so names/namespaces
          # declared in the manifests are respected. Using --ignore-not-found
          # keeps this idempotent.
          kubectl delete -f k8s/alb-ingress.yaml -n backoffice --ignore-not-found=true || true
          kubectl delete -f k8s/alb-service.yaml -n backoffice --ignore-not-found=true || true
          kubectl delete -f k8s/alb-deployment.yaml -n backoffice --ignore-not-found=true || true

          # Wait briefly for deletes to propagate in the cluster
          sleep 5

          # Apply all manifests in k8s/ to the backoffice namespace
          kubectl apply -f k8s/ -n backoffice

      - name: Wait for Ingress hostname and verify ALB in AWS
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          set -euo pipefail
          INGRESS_NAME=test-lb-nginx-ingress
          NAMESPACE=backoffice
          HOST=""

          echo "Waiting up to 10 minutes for Ingress to receive a loadBalancer hostname..."
          for i in $(seq 1 60); do
            HOST=$(kubectl get ingress ${INGRESS_NAME} -n ${NAMESPACE} \
              -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "${HOST}" ]; then
              echo "Found ingress hostname: ${HOST}"
              break
            fi
            echo "Ingress hostname not set yet (${i}/60). Sleeping 10s..."
            sleep 10
          done

          if [ -z "${HOST}" ]; then
            echo "ERROR: Ingress did not receive a loadBalancer hostname after timeout"
            kubectl describe ingress ${INGRESS_NAME} -n ${NAMESPACE} || true
            kubectl get events -n ${NAMESPACE} --sort-by=.metadata.creationTimestamp || true
            exit 1
          fi

          echo "Checking AWS for ALB with DNSName ${HOST}"
          ALB_ARN=""
          for i in $(seq 1 30); do
            QUERY="LoadBalancers[?DNSName=='${HOST}'].LoadBalancerArn"
            ALB_ARN=$(aws elbv2 describe-load-balancers \
              --region ${AWS_REGION} \
              --query "${QUERY}" \
              --output text || true)
            if [ -n "${ALB_ARN}" ] && [ "${ALB_ARN}" != "None" ]; then
              echo "Found ALB ARN: ${ALB_ARN}"
              break
            fi
            echo "ALB not visible yet in AWS (${i}/30). Sleeping 10s..."
            sleep 10
          done

          if [ -z "${ALB_ARN}" ] || [ "${ALB_ARN}" = "None" ]; then
            echo "ERROR: ALB not found in AWS for DNS ${HOST}"
            aws elbv2 describe-load-balancers --region ${AWS_REGION} --output table || true
            exit 1
          fi

          echo "ALB verified: ${ALB_ARN}"


      - name: Diagnose deployment before rollout
        run: |
          echo "=== Checking deployment status ==="
          kubectl get deployment #  cloudfix-bko-deployment-stg -n backoffice -o wide

          echo "=== Checking pods status ==="
          kubectl get pods -n backoffice #  -l app=cloudfix-bko-api -o wide

          echo "=== Checking events ==="
          kubectl get events -n backoffice --sort-by=.metadata.creationTimestamp

          echo "=== Checking pod logs (if any) ==="
          kubectl logs -l app=cloudfix-bko-api -n backoffice --tail=20 --ignore-errors=true

      #  - name: Wait for deployment rollout
      #  run: |
      #    kubectl rollout status deployment/cloudfix-bko-deployment-stg -n backoffice --timeout=600s

      - name: Get deployment status
        run: |
          kubectl get deployments -n backoffice
          kubectl get pods -n backoffice #  -l app=cloudfix-bko-api
          #  kubectl describe deployment cloudfix-bko-deployment-stg -n backoffice
